// Jenkinsfile-frontend
def PIPELINE_ID = "${env.BUILD_NUMBER}"

def getImageTag() {
    def dateFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
    def currentDate = new Date()
    return dateFormat.format(currentDate)
}

podTemplate(
    label: "${PIPELINE_ID}",
    serviceAccount: 'jenkins',
    containers: [
        containerTemplate(name: 'node', image: 'node:20-slim', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'podman', image: "mgoltzsche/podman", ttyEnabled: true, command: 'cat', privileged: true),
        containerTemplate(name: 'azure-cli', image: 'hiondal/azure-kubectl:latest', command: 'cat', ttyEnabled: true),
        containerTemplate(name: 'git', image: 'alpine/git', command: 'cat', ttyEnabled: true)
    ],
    volumes: [
        emptyDirVolume(mountPath: '/root/.azure', memory: false)
    ]
) {
    node(PIPELINE_ID) {
        timeout(time: 2, unit: 'HOURS') {  // 전체 파이프라인을 2시간으로 제한
        def props
        def imageTag = getImageTag()
        def namespace

        stage("Get Source") {
            checkout scm
            props = readProperties file: "deployment/deploy_env_vars"
            namespace = "${props.namespace}"
        }

        stage("Setup AKS") {
            container('azure-cli') {
                withCredentials([azureServicePrincipal('azure-credentials')]) {
                    sh """
                        az login --service-principal -u \$AZURE_CLIENT_ID -p \$AZURE_CLIENT_SECRET -t \$AZURE_TENANT_ID
                        az aks get-credentials --resource-group ictcoe-edu --name ${props.teamid}-aks --overwrite-existing
                    """
                }
            }
        }

        stage('Build & Push Image') {
            container('podman') {
                withCredentials([usernamePassword(
                    credentialsId: 'acr-credentials',
                    usernameVariable: 'USERNAME',
                    passwordVariable: 'PASSWORD'
                )]) {
                    def imagePath = "${props.registry}/${props.image_org}/${props.root_project}:${imageTag}"
                    
                    sh """
                        podman login ${props.registry} --username \$USERNAME --password \$PASSWORD

                        podman build \\
                            --build-arg PROJECT_FOLDER="." \\
                            --build-arg REACT_APP_AUTH_URL="${props.react_app_auth_url}" \\
                            --build-arg REACT_APP_REPORT_URL="${props.react_app_report_url}" \\
                            --build-arg REACT_APP_SUBSCRIPTION_URL="${props.react_app_subscription_url}" \\
                            --build-arg BUILD_FOLDER="deployment" \\
                            --build-arg EXPORT_PORT="${props.export_port}" \\
                            -f deployment/container/Dockerfile-bidw-web \\
                            -t ${imagePath} .
                        
                        podman push ${imagePath}
                    """
                }
            }
        }

        stage('Update Manifest and Push') {
            container('git') {
                withCredentials([usernamePassword(credentialsId: 'github-credentials', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    sh """
                        # Git 설정
                        git config --global user.email "jenkins@example.com"
                        git config --global user.name "Jenkins CI"
                        
                        # 매니페스트 저장소 클론
                        git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/HighFive-bidw/bidw-manifest.git
                        cd bidw-manifest
                        
                        # 프론트엔드 이미지 업데이트
                        echo "Updating frontend image"
                        # sed를 사용하여 이미지 태그 업데이트
                        sed -i "s|image: ${props.registry}/${props.image_org}/${props.root_project}:.*|image: ${props.registry}/${props.image_org}/${props.root_project}:${imageTag}|g" manifest_frontend/deployments/frontend-deployment.yaml
                        
                        # 변경 내용 확인
                        cat manifest_frontend/deployments/frontend-deployment.yaml | grep image:
                        
                        # Git에 변경 사항 커밋 및 푸시
                        git add manifest_frontend/deployments/frontend-deployment.yaml
                        git commit -m "Update frontend image tag to ${imageTag}"
                        git push
                    """
                }
            }
        }
        }
    }
}